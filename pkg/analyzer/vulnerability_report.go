package analyzer

// Package analyzer Debian CVE Tracker Analyzer
// Copyright 2019 debcvescan authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Vulnerability contains a vulnerability
type Vulnerability struct {
	Severity         Severity `json:"severity"`
	CVE              string   `json:"cve"`
	Description      string   `json:"description"`
	PackageName      string   `json:"package"`
	InstalledVersion string   `json:"installed_version"`
	FixedVersion     string   `json:"fixed_version"`
}

// VulnerabilityReport vulnerability report
type VulnerabilityReport struct {
	CountTotal      int             `json:"count_total"`
	CountHigh       int             `json:"count_high"`
	CountMedium     int             `json:"count_medium"`
	CountLow        int             `json:"count_low"`
	CountUnknown    int             `json:"count_unknown"`
	CountIgnore     int             `json:"count_ignore"`
	CountOpen       int             `json:"count_open"`
	Vulnerabilities []Vulnerability `json:"vulnerabilities"`
}

// NewVulnerabilityReport creates a new instance of the vulnerability report
func NewVulnerabilityReport() VulnerabilityReport {
	report := VulnerabilityReport{}
	report.CountHigh = 0
	report.CountTotal = 0
	report.CountMedium = 0
	report.CountLow = 0
	report.CountUnknown = 0
	report.CountIgnore = 0
	report.Vulnerabilities = []Vulnerability{}
	return report
}

// AddVulnerability adds a new vulnerability to the report and updates the statistics
func (r *VulnerabilityReport) AddVulnerability(vul Vulnerability) {
	// statistics
	switch vul.Severity {
	case OPEN:
		r.CountOpen++
	case HIGH:
		r.CountHigh++
	case MEDIUM:
		r.CountMedium++
	case LOW:
		r.CountLow++
	case IGNORE:
		r.CountIgnore++
	case UNKNOWN:
		r.CountUnknown++
	}
	r.CountTotal++
	if vul.Severity == LOW || vul.Severity == MEDIUM || vul.Severity == HIGH || vul.Severity == OPEN {
		r.Vulnerabilities = append(r.Vulnerabilities, vul)
	}
}

// RemoveVulnerability removes a vulnerability from the report
func (r *VulnerabilityReport) RemoveVulnerability(vul Vulnerability) {

}
